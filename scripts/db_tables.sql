DROP DATABASE IF EXISTS datelogger;
CREATE DATABASE datelogger;
USE datelogger;

CREATE TABLE DATES (
	DA_ID INT PRIMARY KEY AUTO_INCREMENT,
    DA_PLACE VARCHAR (50),
    DA_OCCASION VARCHAR (50),
    DA_DATE DATE,
    DA_DESCRIPTION VARCHAR (255),
    DA_OBSERVATION VARCHAR (500)
);

CREATE TABLE DATE_PICTURES (
	DP_ID INT PRIMARY KEY AUTO_INCREMENT,
    DP_DATE INT,
    DP_IMAGE VARCHAR (255),
    FOREIGN KEY (DP_DATE) REFERENCES DATES (DA_ID)
);

CREATE TABLE TRIPS (
	TR_ID INT PRIMARY KEY AUTO_INCREMENT,
    TR_PLACE VARCHAR (50),
    TR_ACCOMMODATION VARCHAR (50),
    TR_START_DATE DATE,
    TR_END_DATE DATE,
    TR_OBSERVATIONS VARCHAR (500)
);

CREATE TABLE LOCATIONS_VISITED (
	LV_ID INT PRIMARY KEY AUTO_INCREMENT,
    LV_NAME VARCHAR (50),
    LV_TRIP INT,
    LV_DESCRIPTION VARCHAR (500),
    LV_OBSERVATIONS VARCHAR (500),
    FOREIGN KEY (LV_TRIP) REFERENCES TRIPS (TR_ID)
);

CREATE TABLE LOCATION_PICTURES (
	LP_ID INT PRIMARY KEY AUTO_INCREMENT,
    LP_LOCATION INT,
    LP_IMAGE VARCHAR (255),
    FOREIGN KEY (LP_LOCATION) REFERENCES LOCATIONS_VISITED (LV_ID)
);

CREATE TABLE USERS (
	US_ID INT PRIMARY KEY AUTO_INCREMENT,
    US_NAME VARCHAR (50),
    US_PASSWORD VARCHAR (20)
);

-- TABELA RELACIONAL ENTRE OS USERS E OS DATES
CREATE TABLE RATINGS_DATES (
	RA_ID INT PRIMARY KEY AUTO_INCREMENT,
    RA_DATE INT,
    RA_USER INT,
    RA_RATING INT,
    RA_COMMENT VARCHAR (500),
    RA_OBSERVATIONS VARCHAR (500),
    FOREIGN KEY(RA_DATE) REFERENCES DATES(DA_ID),
    FOREIGN KEY(RA_USER) REFERENCES USERS(US_ID)
);

-- TABELA RELACIONAL ENTRE OS USERS E AS TRIPS
CREATE TABLE RATINGS_TRIPS (
	RT_ID INT PRIMARY KEY AUTO_INCREMENT,
    RT_TRIP INT,
    RT_USER INT,
    RT_RATING INT,
    RT_COMMENT VARCHAR (500),
    RT_OBSERVATIONS VARCHAR (500),
    FOREIGN KEY(RT_TRIP) REFERENCES TRIPS(TR_ID),
    FOREIGN KEY(RT_USER) REFERENCES USERS(US_ID)
);